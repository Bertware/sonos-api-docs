{
  "$schema": "https://svrooij.io/sonos-api-docs/schema/documentation.json",
  "language": "EN",
  "license": "MIT",
  "services": {
    "AlarmClockService": {
      "description": "Control the sonos alarms",
      "actions": {
        "CreateAlarm": {
          "description": "Create a single alarm, all properties are required",
          "params": {
            "StartLocalTime": "The start time as hh:mm:ss",
            "Duration": "The duration as hh:mm:ss",
            "Recurrence": "Repeat this alarm on",
            "Enabled": "Alarm enabled after creation",
            "RoomUUID": "The UUID of the speaker you want this alarm for",
            "ProgramURI": "The sound uri",
            "ProgramMetaData": "The sound metadata, can be empty string",
            "PlayMode": "Alarm play mode",
            "Volume": "Volume between 0 and 100",
            "IncludeLinkedZones": "Should grouped players also play the alarm?"
          }
        },
        "DestroyAlarm": {
          "description": "Delete an alarm",
          "params": {
            "ID": "The Alarm ID, see ListAndParseAlarms"
          }
        },
        "ListAlarms": {
          "description": "Get the AlarmList as XML, use ListAndParseAlarms for parsed version"
        },
        "UpdateAlarm": {
          "description": "Update an alarm, all parameters are required. Use PatchAlarm where you can update a single parameter",
          "params": {
            "ID": "The ID of the alarm see ListAndParseAlarms",
            "StartLocalTime": "The start time as hh:mm:ss",
            "Duration": "The duration as hh:mm:ss",
            "Recurrence": "Repeat this alarm on",
            "Enabled": "Alarm enabled after creation",
            "RoomUUID": "The UUID of the speaker you want this alarm for",
            "ProgramURI": "The sound uri",
            "ProgramMetaData": "The sound metadata, can be empty string",
            "PlayMode": "Alarm play mode",
            "Volume": "Volume between 0 and 100",
            "IncludeLinkedZones": "Should grouped players also play the alarm?"
          }
        }
      }
    },
    "AVTransportService": {
      "description": "Service that controls stuff related to transport (play/pause/next/special urls)",
      "actions": {
        "BecomeCoordinatorOfStandaloneGroup": {
          "description": "Leave the current group and revert to a single player."
        },
        "ConfigureSleepTimer": {
          "description": "Stop playing after set sleep timer",
          "remarks":"Send to non-coordinator returns error code 800",
          "params": {
            "NewSleepTimerDuration": "Time to stop after, as hh:mm:ss"
          }
        },
        "DelegateGroupCoordinationTo": {
          "description": "Delegates the coordinator role to another player in the same group",
          "remarks":"Send to non-coordinator has no results - should be avoided.",
          "params": {
            "NewCoordinator": "uuid of the new coordinator - must be in same group",
            "RejoinGroup": "Should former coordinator rejoin the group?"
          }
        },
        "GetCrossfadeMode": {
          "description": "Get crossfade mode, 1 for on, 0 for off",
          "remarks":"Send to non-coordinator may return wrong value as only the coordinator value in a group"
        },
        "GetCurrentTransportActions": {
          "description": "Get current transport actions such as Set, Stop, Pause, Play, X_DLNA_SeekTime, Next, X_DLNA_SeekTrackNr",
          "remarks":"Send to non-coordinator always returns Stop, Play"
        },
        "GetMediaInfo": {
          "description": "Get information about the current playing media (queue)"
        },
        "GetPositionInfo": {
          "description": "Get information about current position (position in queue and time in current song)"
        },
        "GetRemainingSleepTimerDuration": {
          "description": "Get time left on sleeptimer or empty string",
          "remarks":"Send to non-coordinator returns error code 800"
        },
        "GetTransportInfo": {
          "description": "Get current transport status, speed and state such as PLAYING, STOPPED, PLAYING, PAUSED_PLAYBACK, TRANSITIONING, NO_MEDIA_PRESENT",
          "remarks":"Send to non-coordinator always returns PLAYING"
        },
        "GetTransportSettings": {
          "description": "Get transport settings",
          "remarks":"Send to non-coordinator returns the settings of it's queue"
        },
        "Next": {
          "description": "Go to next song, not always supported - see GetCurrentTransportActions"
        },
        "Pause": {
          "description": "Pause playback"
        },
        "Play": {
          "description": "Start playing the set TransportURI",
          "params": {
            "Speed": "Play speed usually 1, can be a fraction of 1"
          }
        },
        "Previous": {
          "description": "Go to previous song, not always supported - GetCurrentTransportActions"
        },
        "RemoveAllTracksFromQueue": {
          "description": "Flushes the SONOS queue. If queue is already empty it throw error 804",
          "remarks":"Send to non-coordinator returns error code 800."
        },
        "SaveQueue": {
          "description": "Saves the current SONOS queue as a SONOS playlist and outputs objectID",
          "remarks":"Send to non-coordinator returns error code 800",
          "params": {
            "Title": "SONOS playlist title"
          }
        },
        "Seek": {
          "description": "Seek track in queue, time delta or absolute time in song, not always supported - see GetCurrentTransportActions",
          "remarks":"Returns error code 701 in case that content does not support Seek or send to non-coordinator",
          "params": {
            "Unit": "What to seek",
            "Target": "Position of track in queue (start at 1) or hh:mm:ss for REL_TIME or +/-hh:mm:ss for TIME_DELTA"
          }
        },
        "SetAVTransportURI": {
          "description": "Set the transport URI to a song, a stream, the queue, another player-rincon and a lot more",
          "remarks":"If set to another player RINCON, the player is grouped with that one.",
          "params": {
            "CurrentURI": "The new TransportURI - its a special SONOS format",
            "CurrentURIMetaData": "Track Metadata, see MetadataHelper.GuessTrack to guess based on track uri"
          }
        },
        "SetCrossfadeMode": {
          "description": "Set crossfade mode off",
          "remarks":"Send to non-coordinator returns error code 800. Same for content, which does not support crossfade mode.",
          "params": {
            "CrossfadeMode": "true for on, false for off"
          }
        },
        "SetPlayMode": {
          "description": "Set the PlayMode",
          "remarks":"Send to non-coordinator returns error code 712. If SONOS queue is not activated returns error code 712.",
          "params": {
            "NewPlayMode": "New playmode"
          }
        },
        "SnoozeAlarm": {
          "description": "Snooze the current alarm for some time.",
          "params": {
            "Duration": "Snooze time as hh:mm:ss, 10 minutes = 00:10:00"
          }
        },
        "Stop": {
          "description": "Stop playback"
        }
      }
    },
    "ContentDirectoryService": {
      "description": "Browse for local content",
      "actions": {
        "Browse": {
          "description": "Browse for content, see BrowseParsed for a better experience.",
          "params": {
            "ObjectID": "The search query, ['A:ARTIST','A:ALBUMARTIST','A:ALBUM','A:GENRE','A:COMPOSER','A:TRACKS','A:PLAYLISTS'] with optionally ':search+query' behind it.",
            "BrowseFlag": "How to browse",
            "Filter": "Which fields should be returned '*' for all.",
            "StartingIndex": "Paging, where to start",
            "RequestedCount": "Paging, number of items",
            "SortCriteria": "Sort the results based on metadata fields. '+upnp:artist,+dc:title' for sorting on artist then on title."
          }
        }
      }
    },
    "DevicePropertiesService": {
      "description": "Modify device properties, like led status and stereo pairs -",
      "actions": {
        "CreateStereoPair": {
          "description": "Create a stereo pair (left, right speakers), right one becomes hidden - only supported by some players",
          "params": {
            "ChannelMapSet": "example: RINCON_B8E9375831C001400:LF,LF;RINCON_000E58FE3AEA01400:RF,RF"
          }
        },
        "SeparateStereoPair": {
          "description": "Separate a stereo pair - only supported by some players",
          "params": {
            "ChannelMapSet": "example: RINCON_B8E9375831C001400:LF,LF;RINCON_000E58FE3AEA01400:RF,RF"
          }
        }
      }
    },
    "GroupRenderingControlService": {
      "description": "Volume related controls for groups. Group volume is the average volume of all players. Snapshot stores the volume ratio between players.",
      "actions": {
        "GetGroupMute": {
          "description": "Get 1 for muted, 0 for un-muted",
          "remarks":"Send to non-coordinator returns error code 701"
        },
        "GetGroupVolume": {
          "description": "Get the group volume.",
          "remarks":"Send to non-coordinator returns error code 701"
        },
        "SetGroupMute": {
          "description": "(Un-/)Mute the entire group",
          "remarks":"Send to non-coordinator returns error code 701",
          "params": {
            "DesiredMute": "True for mute, false for un-mute"
          }
        },
        "SetGroupVolume": {
          "description": "Change group volume. Players volume will be changed proportionally based on last snapshot",
          "remarks":"Send to non-coordinator returns error code 701",
          "params": {
            "DesiredVolume": "New volume between 0 and 100"
          }
        },
        "SetRelativeGroupVolume": {
          "description": "Relatively change group volume - returns final group volume. Players volume will be changed proportionally based on last snapshot",
          "remarks":"Send to non-coordinator returns error code 701",
          "params": {
            "Adjustment": "Number between -100 and +100"
          }
        }, 
        "SnapshotGroupVolume": {
          "description": "Creates a new group volume snapshot,  the volume ratio between all players. It is used by SetGroupVolume and SetRelativeGroupVolume",
          "remarks":"Send to non-coordinator returns error code 701"
        }
      }
    },
    "MusicServicesService": {
      "description": "External music services",
      "actions": {
        "ListAvailableServices": {
          "description": "Load music service list (xml), see ListAndParseAvailableServices() for parsed version."
        }
      }
    },
    "QueueService": {
      "description": "Modify and browse queues"
    },
    "RenderingControlService": {
      "description": "Volume related controls",
      "actions": {
        "GetBass": {
          "description": "Get bass level between -10 and 10"
        },
        "GetEQ": {
          "description": "Get EQ value (see SetEQ) for different EQTypes - not supported by all devices (is TV related)",
          "params": {
            "EQType": "EQ type such as DialogLevel, NightMode, SubGain"
          }
        },
        "GetLoudness": {
          "description": "Get loudness 1 for on, 0 for off",
          "params": {
            "Channel": "Master"
          }
        },
        "GetTreble": {
          "description": "Get treble between -10 and 10"
        },
        "GetVolume": {
          "description": "Get volume between 0 and 100",
          "params": {
            "Channel": "Master"
          }
        },
        "SetBass": {
          "description": "Set bass level",
          "params": {
            "DesiredBass": "between -10 and 10"
          }
        },
        "SetEQ": {
          "description": "Set EQ value for different types - not supported by all devices (is TV related)",
          "params": {
            "EQType": "DialogLevel, NightMode, SubGain",
            "DesiredValue": "DialogLevel and NightMode: 0 for off, 1 for on. SubGain between -10 and 10"
          }
        },
        "SetLoudness": {
          "description": "Set loudness on / off",
          "params": {
            "DesiredLoudness": "true for on"
          }
        },
        "SetTreble": {
          "description": "Set treble level",
          "params": {
            "DesiredTreble": "between -10 and 10"
          }
        }
      }
    },
    "ZoneGroupTopologyService": {
      "description": "Zone config stuff, eg getting all the configured sonos zones.",
      "actions": {
        "GetZoneGroupAttributes": {
          "description": "Get information about the current Zone"
        },
        "GetZoneGroupState": {
          "description": "Get all the Sonos groups, (as XML)"
        }
      }
    }
  }
}